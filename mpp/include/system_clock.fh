!***********************************************************************
!*                             Apache License 2.0
!*
!* This file is part of the GFDL Flexible Modeling System (FMS).
!*
!* Licensed under the Apache License, Version 2.0 (the "License");
!* you may not use this file except in compliance with the License.
!* You may obtain a copy of the License at
!*
!*     http://www.apache.org/licenses/LICENSE-2.0
!*
!* FMS is distributed in the hope that it will be useful, but WITHOUT
!* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied;
!* without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
!* PARTICULAR PURPOSE. See the License for the specific language
!* governing permissions and limitations under the License.
!***********************************************************************
!> @file

!> @addtogroup mpp_mod
!> @{

#if defined(use_libMPI)
#define SYSTEM_CLOCK system_clock_mpi

!#######################################################################
!> There can be one ONE baseline count0 and this routine is
!! included in multiple places.
!! mimics F90 SYSTEM_CLOCK intrinsic
subroutine system_clock_mpi( count, count_rate, count_max )
      integer(i8_kind), intent(out), optional :: count, count_rate, count_max
!count must return a number between 0 and count_max
      integer(i8_kind), parameter :: maxtick=HUGE(count_max)
      if(first_call_system_clock_mpi)then
         first_call_system_clock_mpi=.false.
         mpi_count0 = MPI_WTime()
         mpi_tick_rate = real(1.d0/MPI_WTick(), r8_kind)
      endif
      if( PRESENT(count) )then
          count = int((MPI_WTime()-mpi_count0)*mpi_tick_rate, i8_kind)
      end if
      if( PRESENT(count_rate) )then
          count_rate = int(mpi_tick_rate, i8_kind)
      end if
      if( PRESENT(count_max) )then
          count_max = maxtick-1
      end if
      return
    end subroutine system_clock_mpi

#else
#define SYSTEM_CLOCK system_clock_default
subroutine system_clock_default( count, count_rate, count_max )
!mimics F90 SYSTEM_CLOCK intrinsic
      integer(i8_kind), optional :: count, count_rate, count_max
!count must return a number between 0 and count_max
      integer                      :: count_int, count_rate_int, count_max_int
      call system_clock( count_int, count_rate_int, count_max_int)
      if( PRESENT(count) )      count      = count_int
      if( PRESENT(count_rate) ) count_rate = count_rate_int
      if( PRESENT(count_max) )  count_max  = count_max_int
      return
    end subroutine system_clock_default
#endif
!> @}
