! -*-f90-*-

!***********************************************************************
!*                             Apache License 2.0
!*
!* This file is part of the GFDL Flexible Modeling System (FMS).
!*
!* Licensed under the Apache License, Version 2.0 (the "License");
!* you may not use this file except in compliance with the License.
!* You may obtain a copy of the License at
!*
!*     http://www.apache.org/licenses/LICENSE-2.0
!*
!* FMS is distributed in the hope that it will be useful, but WITHOUT
!* WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied;
!* without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
!* PARTICULAR PURPOSE. See the License for the specific language
!* governing permissions and limitations under the License.
!***********************************************************************
!> @file

!> @addtogroup mpp_mod
!> @{

!> @brief Wrapper routine for scalar checksums
!!
!> mold is a dummy array to be used by TRANSFER()
!! must be same TYPE as result
!! result is i8_kind, which will actually be int ifdef no_8byte_integers
!! mold and mask_val must be same numBytes, otherwise undefined behavior
function MPP_CHKSUM_( var, pelist, mask_val )
      integer(i8_kind) :: MPP_CHKSUM_
      MPP_TYPE_, intent(in) :: var
      integer, intent(in), optional :: pelist(:)
      integer(i8_kind) :: mold(1)
  MPP_TYPE_, intent(in), optional :: mask_val
      pointer( p, mold )

      p = LOC(var)

  if ( PRESENT(mask_val) ) then
     MPP_CHKSUM_ = mpp_chksum( mold, pelist, TRANSFER(mask_val, mold(1)) )
  else
      MPP_CHKSUM_ = mpp_chksum( mold, pelist )
  end if
      return
    end function MPP_CHKSUM_
!> @}
