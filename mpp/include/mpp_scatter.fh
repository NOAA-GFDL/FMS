!***********************************************************************
!*                   GNU Lesser General Public License
!*
!* This file is part of the GFDL Flexible Modeling System (FMS).
!*
!* FMS is free software: you can redistribute it and/or modify it under
!* the terms of the GNU Lesser General Public License as published by
!* the Free Software Foundation, either version 3 of the License, or (at
!* your option) any later version.
!*
!* FMS is distributed in the hope that it will be useful, but WITHOUT
!* ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
!* FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
!* for more details.
!*
!* You should have received a copy of the GNU Lesser General Public
!* License along with FMS.  If not, see <http://www.gnu.org/licenses/>.
!***********************************************************************

!> addtogroup mpp_mod
!> @{

!> @brief Scatter data from one pe to the specified pes.
!!
!> Scatter (ie - is) * (je - js) contiguous elements of array data from the designated root pe
!! into contigous members of array segment in each pe that is included in the pelist argument.
subroutine MPP_SCATTER_PELIST_2D_(is, ie, js, je, pelist, array_seg, input_data, is_root_pe)
   integer,                           intent(in)    :: is, ie, js, je !< indices of segment array
   integer,   dimension(:),           intent(in)    :: pelist !<PE list of target pes,
                                                              !! must be in monotonic increasing order
   MPP_TYPE_, dimension(is:ie,js:je), target, intent(inout)  :: array_seg !< 2D array of output data
   MPP_TYPE_, dimension(:,:), contiguous, target, intent(in) :: input_data !< 2D array of input data
   logical,                           intent(in)    :: is_root_pe !< operational root pe

   MPP_TYPE_, pointer ::  arr3D(:,:,:)
   MPP_TYPE_, pointer :: data3D(:,:,:)

   arr3D(1:size(array_seg,1),1:size(array_seg,2),1:1) => array_seg
   if (is_root_pe) then
     data3D(1:size(input_data,1),1:size(input_data,2),1:1) => input_data
   else
     data3D => null()
   endif

   call mpp_scatter(is, ie, js, je, 1, pelist, arr3D, data3D, is_root_pe)

   return

end subroutine MPP_SCATTER_PELIST_2D_

subroutine MPP_SCATTER_PELIST_3D_(is, ie, js, je, nk, pelist, array_seg, input_data, is_root_pe)
   integer,                                intent(in)    :: is, ie, js, je, nk
   integer,   dimension(:),                intent(in)    :: pelist
   MPP_TYPE_, dimension(is:ie,js:je,1:nk), intent(inout) :: array_seg
   MPP_TYPE_, dimension(:,:,:),            intent(in)    :: input_data
   logical,                                intent(in)    :: is_root_pe

   integer :: i, j, k, n, m, ierr, base_idx
   integer :: i1, i2, j1, j2
   integer :: root_pe, root_pe_test, recv_count
   integer, dimension(size(pelist)) :: counts, displs
   integer, dimension(4*size(pelist)) :: gind
   MPP_TYPE_, dimension(:), allocatable :: temp

   if (.not.ANY(mpp_pe().eq.pelist(:))) return

   if (is_root_pe) then
     root_pe = mpp_pe()
     root_pe_test = 999
     if (.not.ANY(pelist(:).eq.root_pe)) call mpp_error(FATAL, &
                "fms_io(mpp_scatter_pelist): root_pe not a member of pelist")
   else
     root_pe = 0
     root_pe_test = -999
   endif

! need this check in case MPI-rank 0 is a member of the pelist
   call mpp_max(root_pe_test, pelist)
   if (root_pe_test.lt.0) call mpp_error(FATAL, &
                "fms_io(mpp_scatter_pelist): root_pe not specified or not a member of the pelist")
! need to make sure only one root_pe has been specified
   call mpp_sum(root_pe, pelist)
   if ((is_root_pe) .and. (mpp_pe().ne.root_pe)) call mpp_error(FATAL, &
                "fms_io(mpp_scatter_pelist): too many root_pes specified")

   ! Gather Indices on root pe
   call mpp_gather((/is, ie, js, je/), gind, pelist)

   ! Compute counts, displs, and setup 1d send buffer (temp)
   if (is_root_pe) then

      displs(1) = 0
      do k = 1, size(pelist)
         base_idx = 4*(k-1)
         i1 = gind( base_idx + 1 ) ;; i2 = gind( base_idx + 2 )
         j1 = gind( base_idx + 3 ) ;; j2 = gind( base_idx + 4 )
         counts(k) = (i2 - i1 + 1) * (j2 - j1 + 1) * nk
         if (k > 1) displs(k) = displs(k-1) + counts(k-1)
      enddo

      allocate(temp(sum(counts)))

      m = 1
      do n = 1, size(pelist)
         base_idx = 4*(n-1)
         i1 = gind( base_idx + 1 ) ;; i2 = gind( base_idx + 2 )
         j1 = gind( base_idx + 3 ) ;; j2 = gind( base_idx + 4 )
         do k = 1, nk
            do j = j1, j2
               do i = i1, i2
                  temp(m) = input_data(i,j,k)
                  m = m + 1
               enddo
            enddo
         enddo
       enddo
   else
      allocate(temp(1))
   endif

   ! Compute recv_count on each rank
   recv_count = (ie-is+1)*(je-js+1)*nk

   call mpp_scatter(temp, counts, displs, array_seg, recv_count, root_pe, pelist, ierr)

   call mpp_sync_self()

   deallocate(temp)

   return

end subroutine MPP_SCATTER_PELIST_3D_

!> @}
